# BASIC SHELL ALIASES
alias ali='cat ~/.alias'
alias lsd='ls -Gl | grep "^d"'
alias lsort='echo "========== Newest ==========" && ls -At1 && echo "========== Oldest =========="'
alias reload="source ~/.bash_profile && clear"
alias cd..="cd .."
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."


# APPS
alias safari="open -a Safari http://dixonschwabl.com/"
alias chrome="open -a Google\ Chrome http://dixonschwabl.com/"


# COMPOSER
alias compu="composer update --ignore-platform-reqs"
alias compcraft() {
  composer create-project craftcms/craft "$1" -s beta
}

# CRAFT UPDATE PLUGIN
# syntax:
# cupseomatic [craft folder]
# example:
# cupseomatic rba_craft/
cup() {
	if [ -d "$1/plugins/$2" ]; then
		cd "$1"/plugins/$2;
		git pull;
		cd ../../../;
	else
		cd "$1"/plugins/;
		git clone $3 $2;
		cd ../../;
	fi
}
# when a plugin is not in the repo root, clone it and move plugin files to the right directory
# syntax:
# cupmovedelete [craft folder] [name of plugin folder] [repo to clone] [name of folder inside of repo root]
cupmovedelete() {
	cd "$1"/plugins/;
	rm -rf $2;
	git clone $3 "$2-delete";
	mkdir -p $2;
	mv "$2-delete"/$4/* $2;
	rm -rf "$2-delete";
	cd ../../;
}
cupadminbar() {
	cup $1 adminbar https://github.com/wbrowar/adminbar.git;
}
cupcontentstats() {
	cup $1 contentstats https://github.com/wbrowar/contentstats.git;
}
cupcookies() {
	cup $1 cookies https://github.com/nystudio107/cookies.git;
}
cupfocalpointfield() {
	cupmovedelete $1 focalpointfield https://github.com/aelvan/FocalPointField-Craft.git focalpointfield;
}
cupimager() {
	cupmovedelete $1 imager https://github.com/aelvan/Imager-Craft.git imager;
}
cupimageresize() {
	cupmovedelete $1 imageresize https://github.com/engram-design/ImageResizer.git imageresizer;
}
cupminify() {
	cup $1 minify https://github.com/nystudio107/minify.git;
}
cupseomatic() {
	cup $1 seomatic https://github.com/khalwat/seomatic.git;
}


# GIT
# GIT DOWN – Pull and check status of repo
gitd() {
	git pull && git status && git branch;
}

# GIT UP – Commit with a message and push to current branch
# syntax:
# gitu "[commit message]"
gitu() {
	gitd;
	git add -A && git commit -m "$1" && git push && git status;
}

# GIT CHECKOUT – Checkout git branch
# syntax:
# gitch [branch]
gitch() {
	git checkout $1;
}

# GIT RELEASE – Pull, tag (with version and message), then commit and push to current branch
# syntax:
# gitr "[commit message]" [version number] "[version message (optional)]"
# example:
# gitr "Version 1.1" 1.1.0 "Launching new feature"
gitr() {
	gitu "$1";
	if [ ! -z "$3" ]; then
		git tag -a v$2 -m "$3";
	else
		git tag -a v$2 -m "$1";
	fi
	git push --follow-tags;
}

alias gita="git add -A"
alias gits="git status && git tag"


# GRUNT
alias grn="grunt"
alias grnw="grunt watch"
alias grnr="grunt release"
alias grnf="grunt --force"
alias grnch="grunt && grunt htmlprocess"
alias grnfirst="npm install && bower install && grunt first"


# GULP
alias gl="gulp run"
alias glf="yarn && gulp first"
alias glr="gulp release"
alias glv="gulp vars"
alias glw="gulp watch"


# MAC SPECIFIC
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"
alias showdotfiles="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hidedotfiles="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
alias showdeskicons="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
alias hidedeskicons="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias lock='/System/Library/CoreServices/"Menu Extras"/User.menu/Contents/Resources/CGSession -suspend'
alias ss='/System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine'

notify() {
	osascript -e "display notification \"$2\" with title \"$1\"";
}


# NPM
alias npmi="npm install"
alias npmu="npm update"


# WEBSITE SHORTCUTS
# SITE RELEASE – change version number, run grunt release, then commit all changes and tag release
# syntax:
# siter "[commit message]" [version number] "[version message (optional)]"
# example:
# siter "Version 1.1" 1.1.0 "Launching new feature"
siter() {
	sed -i '' "s/\(  \"version\": \"\)[^\"]*\(\"\)/\1$2\2/g" package.json;
	gulp release;
	if [ ! -z "$3" ]; then
		gitr "$1" $2 "$3";
	else
		gitr "$1" $2 "$1";
	fi
	notify "SITE RELEASE" "Version $2 released!"
}